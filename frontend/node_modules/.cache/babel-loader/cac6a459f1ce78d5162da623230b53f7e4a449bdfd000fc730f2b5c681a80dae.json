{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass AuthService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    // Interceptor para adicionar token automaticamente\n    this.apiClient.interceptors.request.use(config => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Interceptor para lidar com respostas de erro\n    this.apiClient.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expirado ou inválido\n        localStorage.removeItem('authToken');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n  async login(email, password) {\n    // Credenciais mock para desenvolvimento\n    const mockCredentials = [{\n      email: 'admin@accountabot.com',\n      password: 'admin123',\n      user: {\n        id: '1',\n        email: 'admin@accountabot.com',\n        name: 'Administrador',\n        role: 'admin'\n      }\n    }, {\n      email: 'user@accountabot.com',\n      password: 'user123',\n      user: {\n        id: '2',\n        email: 'user@accountabot.com',\n        name: 'Usuário Demo',\n        role: 'user'\n      }\n    }, {\n      email: 'demo@demo.com',\n      password: '123456',\n      user: {\n        id: '3',\n        email: 'demo@demo.com',\n        name: 'Demo User',\n        role: 'user'\n      }\n    }];\n\n    // Simular delay de rede\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Verificar credenciais mock\n    const mockUser = mockCredentials.find(cred => cred.email === email && cred.password === password);\n    if (mockUser) {\n      return {\n        success: true,\n        token: `mock-jwt-token-${mockUser.user.id}-${Date.now()}`,\n        user: mockUser.user\n      };\n    }\n\n    // Se não encontrou nas credenciais mock, tentar API real\n    try {\n      const response = await this.apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro no login:', error);\n      throw new Error('Email ou senha inválidos');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await this.apiClient.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro no registro:', error);\n      throw new Error('Falha no registro');\n    }\n  }\n  async validateToken(token) {\n    try {\n      const response = await this.apiClient.get('/auth/validate', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data.user;\n    } catch (error) {\n      console.error('Erro na validação do token:', error);\n      throw new Error('Token inválido');\n    }\n  }\n  async refreshToken() {\n    try {\n      const response = await this.apiClient.post('/auth/refresh');\n      return response.data.token;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      throw new Error('Falha ao renovar token');\n    }\n  }\n  async logout() {\n    try {\n      await this.apiClient.post('/auth/logout');\n    } catch (error) {\n      console.error('Erro no logout:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n    }\n  }\n  async changePassword(currentPassword, newPassword) {\n    try {\n      await this.apiClient.post('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      return false;\n    }\n  }\n  async resetPassword(email) {\n    try {\n      await this.apiClient.post('/auth/reset-password', {\n        email\n      });\n      return true;\n    } catch (error) {\n      console.error('Erro ao solicitar reset de senha:', error);\n      return false;\n    }\n  }\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n}\nexport const authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","constructor","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","email","password","mockCredentials","user","id","name","role","resolve","setTimeout","mockUser","find","cred","success","Date","now","post","data","console","Error","register","userData","validateToken","get","refreshToken","logout","changePassword","currentPassword","newPassword","resetPassword","getToken","isAuthenticated","authService"],"sources":["C:/Users/Usuário/Documents/novo/IA_MARK_01/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\ninterface LoginResponse {\n  success: boolean;\n  token: string;\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n  };\n}\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nclass AuthService {\n  private apiClient = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  constructor() {\n    // Interceptor para adicionar token automaticamente\n    this.apiClient.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Interceptor para lidar com respostas de erro\n    this.apiClient.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Token expirado ou inválido\n          localStorage.removeItem('authToken');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async login(email: string, password: string): Promise<LoginResponse> {\n    // Credenciais mock para desenvolvimento\n    const mockCredentials = [\n      {\n        email: 'admin@accountabot.com',\n        password: 'admin123',\n        user: {\n          id: '1',\n          email: 'admin@accountabot.com',\n          name: 'Administrador',\n          role: 'admin'\n        }\n      },\n      {\n        email: 'user@accountabot.com',\n        password: 'user123',\n        user: {\n          id: '2',\n          email: 'user@accountabot.com',\n          name: 'Usuário Demo',\n          role: 'user'\n        }\n      },\n      {\n        email: 'demo@demo.com',\n        password: '123456',\n        user: {\n          id: '3',\n          email: 'demo@demo.com',\n          name: 'Demo User',\n          role: 'user'\n        }\n      }\n    ];\n\n    // Simular delay de rede\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Verificar credenciais mock\n    const mockUser = mockCredentials.find(\n      cred => cred.email === email && cred.password === password\n    );\n\n    if (mockUser) {\n      return {\n        success: true,\n        token: `mock-jwt-token-${mockUser.user.id}-${Date.now()}`,\n        user: mockUser.user\n      };\n    }\n\n    // Se não encontrou nas credenciais mock, tentar API real\n    try {\n      const response = await this.apiClient.post('/auth/login', {\n        email,\n        password,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro no login:', error);\n      throw new Error('Email ou senha inválidos');\n    }\n  }\n\n  async register(userData: {\n    name: string;\n    email: string;\n    password: string;\n  }): Promise<LoginResponse> {\n    try {\n      const response = await this.apiClient.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Erro no registro:', error);\n      throw new Error('Falha no registro');\n    }\n  }\n\n  async validateToken(token: string): Promise<User> {\n    try {\n      const response = await this.apiClient.get('/auth/validate', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      return response.data.user;\n    } catch (error) {\n      console.error('Erro na validação do token:', error);\n      throw new Error('Token inválido');\n    }\n  }\n\n  async refreshToken(): Promise<string> {\n    try {\n      const response = await this.apiClient.post('/auth/refresh');\n      return response.data.token;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      throw new Error('Falha ao renovar token');\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.apiClient.post('/auth/logout');\n    } catch (error) {\n      console.error('Erro no logout:', error);\n    } finally {\n      localStorage.removeItem('authToken');\n    }\n  }\n\n  async changePassword(currentPassword: string, newPassword: string): Promise<boolean> {\n    try {\n      await this.apiClient.post('/auth/change-password', {\n        currentPassword,\n        newPassword,\n      });\n      return true;\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      return false;\n    }\n  }\n\n  async resetPassword(email: string): Promise<boolean> {\n    try {\n      await this.apiClient.post('/auth/reset-password', { email });\n      return true;\n    } catch (error) {\n      console.error('Erro ao solicitar reset de senha:', error);\n      return false;\n    }\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('authToken');\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    return !!token;\n  }\n}\n\nexport const authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}