package com.finrobot.agents;

import lombok.Builder;
import lombok.Data;
import lombok.NonNull;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * Represents the response from an AI Agent after processing a request.
 * 
 * This class encapsulates the results of financial analysis, including
 * the processed data, insights, recommendations, and metadata about
 * the processing execution.
 */
@Data
@Builder
public class AgentResponse {
    
    /**
     * Unique identifier for this response
     */
    @Builder.Default
    private String responseId = UUID.randomUUID().toString();
    
    /**
     * ID of the original request this response corresponds to
     */
    @NonNull
    private String requestId;
    
    /**
     * ID of the agent that generated this response
     */
    @NonNull
    private String agentId;
    
    /**
     * Status of the processing
     */
    @NonNull
    private ResponseStatus status;
    
    /**
     * The main result data from processing
     */
    private Object resultData;
    
    /**
     * Human-readable summary of the analysis
     */
    private String summary;
    
    /**
     * Detailed insights generated by the agent
     */
    private List<String> insights;
    
    /**
     * Actionable recommendations
     */
    private List<String> recommendations;
    
    /**
     * Confidence score for the analysis (0.0 to 1.0)
     */
    @Builder.Default
    private double confidence = 0.0;
    
    /**
     * Additional metadata about the response
     */
    private Map<String, Object> metadata;
    
    /**
     * Chain-of-Thought reasoning steps (if enabled)
     */
    private List<ChainOfThoughtStep> reasoningSteps;
    
    /**
     * Error information (if status is ERROR)
     */
    private ErrorInfo error;
    
    /**
     * Timestamp when processing started
     */
    private LocalDateTime processingStartTime;
    
    /**
     * Timestamp when processing completed
     */
    @Builder.Default
    private LocalDateTime processingEndTime = LocalDateTime.now();
    
    /**
     * Sets the end time of processing
     */
    public void setEndTime(LocalDateTime endTime) {
        this.processingEndTime = endTime;
    }
    
    /**
     * Gets the confidence score of the response
     */
    public double getConfidenceScore() {
        return this.confidence;
    }
    
    /**
     * Sets the confidence score of the response
     */
    public void setConfidenceScore(double confidence) {
        this.confidence = confidence;
    }
    
    /**
     * Gets the result data
     */
    public Object getData() {
        return this.resultData;
    }
    
    /**
     * Sets the result data
     */
    public void setData(Object data) {
        this.resultData = data;
    }
    
    /**
     * Processing duration in milliseconds
     */
    private long processingDurationMs;
    
    /**
     * Resources used during processing
     */
    private ResourceUsage resourceUsage;
    
    /**
     * Enum defining the possible response statuses.
     */
    public enum ResponseStatus {
        SUCCESS("Processing completed successfully"),
        PARTIAL_SUCCESS("Processing completed with some limitations"),
        ERROR("Processing failed due to an error"),
        TIMEOUT("Processing timed out"),
        CANCELLED("Processing was cancelled");
        
        private final String description;
        
        ResponseStatus(String description) {
            this.description = description;
        }
        
        public String getDescription() {
            return description;
        }
    }
    
    /**
     * Represents a single step in Chain-of-Thought reasoning.
     */
    @Data
    @Builder
    public static class ChainOfThoughtStep {
        private int stepNumber;
        private String description;
        private String reasoning;
        private Object intermediateResult;
        private double confidence;
    }
    
    /**
     * Contains error information when processing fails.
     */
    @Data
    @Builder
    public static class ErrorInfo {
        private String errorCode;
        private String errorMessage;
        private String errorDetails;
        private LocalDateTime errorTime;
        private String stackTrace;
    }
    
    /**
     * Contains information about resources used during processing.
     */
    @Data
    @Builder
    public static class ResourceUsage {
        private long memoryUsedBytes;
        private long cpuTimeMs;
        private int llmTokensUsed;
        private int apiCallsMade;
        private long dataProcessedBytes;
    }
    
    /**
     * Calculates and sets the processing duration based on start and end times.
     */
    public void calculateProcessingDuration() {
        if (processingStartTime != null && processingEndTime != null) {
            this.processingDurationMs = java.time.Duration.between(
                processingStartTime, processingEndTime
            ).toMillis();
        }
    }
    
    /**
     * Checks if the response indicates successful processing.
     * @return true if status is SUCCESS or PARTIAL_SUCCESS
     */
    public boolean isSuccessful() {
        return status == ResponseStatus.SUCCESS || status == ResponseStatus.PARTIAL_SUCCESS;
    }
    
    /**
     * Gets a metadata value with type casting.
     * @param key metadata key
     * @param type expected type
     * @param <T> type parameter
     * @return metadata value cast to the specified type, or null if not found
     */
    @SuppressWarnings("unchecked")
    public <T> T getMetadata(String key, Class<T> type) {
        if (metadata == null) {
            return null;
        }
        Object value = metadata.get(key);
        if (value != null && type.isAssignableFrom(value.getClass())) {
            return (T) value;
        }
        return null;
    }
    
    /**
     * Adds an insight to the insights list.
     * @param insight the insight to add
     */
    public void addInsight(String insight) {
        if (insights == null) {
            insights = new java.util.ArrayList<>();
        }
        insights.add(insight);
    }
    
    /**
     * Adds a recommendation to the recommendations list.
     * @param recommendation the recommendation to add
     */
    public void addRecommendation(String recommendation) {
        if (recommendations == null) {
            recommendations = new java.util.ArrayList<>();
        }
        recommendations.add(recommendation);
    }
    
    /**
     * Adds a Chain-of-Thought reasoning step.
     * @param step the reasoning step to add
     */
    public void addReasoningStep(ChainOfThoughtStep step) {
        if (reasoningSteps == null) {
            reasoningSteps = new java.util.ArrayList<>();
        }
        reasoningSteps.add(step);
    }
}